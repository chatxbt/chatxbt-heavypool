{
    "name": "hop",
    "id": "01-hop",
    "tags": ["hop"],
    "website": "",
    "description": "hop protocol is for bridging",
    "explorer": "",
    "research": "",
    "contractAddress": {
        "goerli": "0x3E4a3a4796d16c0Cd582C382691998f7c06420B6",
        "chatxbt": "0x3E4a3a4796d16c0Cd582C382691998f7c06420B6",
        "sepolia": ""
    },
    "abi": ["function sendToL2(uint256 chainId, address recipient, uint256 amount, uint256 amountOutMin, uint256 deadline, address relayer, uint256 relayerFee) external payable"],
    "symbol": "",
    "type": "dex",
    "decimals": 18,
    "status": "active",
    "mapping": {
        "bridge": {
           "arg": ["chainId", "recipient", "amount", "amountOutMin", "deadline", "relayer", "relayerFee"],
           "method": "sendToL2",
           "customCall": "async ({ signer, receiverAddress, amountIn, toToken, fromToken, abi, router, chain, networkname, contract, ethers, fromNetworkId = 109, fromNetworkName, toNetworkId = 80001, toNetworkName, lib, environment = 'test' }) => { let tx = null; const bridges = { goerli: { 'usdt': '0x3E4a3a4796d16c0Cd582C382691998f7c06420B6', 'eth': '0xb8901acB165ed027E32754E0FFe830802919727f' }, ethereum: { 'usdt': '0x3E4a3a4796d16c0Cd582C382691998f7c06420B6', 'eth': '0xb8901acB165ed027E32754E0FFe830802919727f' }, chatxbt: { 'usdt': '0x3E4a3a4796d16c0Cd582C382691998f7c06420B6', 'eth': '0xb8901acB165ed027E32754E0FFe830802919727f' } }; const destinationNetwork = { 'ethereum': 101, 'chatxbt': 101, 'bnb': 102, 'avalanche': 106, 'polygon': 80001, 'arbitrum': 110, 'optimism': 111, 'fantom': 112, 'metis': 151, 'base': 184, 'linea': 183, 'kava': 177, 'mantle': 181, 'sepolia': 10161, 'bsc-testnet': 10102 } const router2 = bridges[fromNetworkName][fromToken?.toLowerCase()]; const destNetwork = destinationNetwork[toNetworkName?.toLowerCase()] || destinationNetwork.polygon; if (!router2) { return { status: false, message: `bridge asset: only assets allowed on this network is eth and usdt`, }; } const contract2 = new ethers.Contract( router2, abi, signer ); const deadline = Math.floor(Date.now() / 1000) + 60 * 5; tx = await contract2.sendToL2( destNetwork, receiverAddress, ethers.parseEther(amountIn), ethers.parseEther(amountIn), deadline, '0x0000000000000000000000000000000000000000', 0, { gasLimit: 4000000, value: ethers.parseEther(amountIn), } ); tx = await tx.wait(); return {status: true, message: `Your asset has been bridged from ${networkname} to ${toNetworkName}  successfully`, data: tx}; }"
        }
    },
    "links": [
        {
            "name": "github",
            "url": ""
        },
        {
            "name": "twitter",
            "url": ""
        },
        {
            "name": "reddit",
            "url": ""
        },
        {
            "name": "whitepaper",
            "url": ""
        }
    ]
}